
> # Get measurement data ready
> # Also extends subsets made in subsets.R
> 
> # *dat1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> idat1[, app.rate.ni := app.rate * !app.mthd %in% c('os', 'cs')]

> idat1[, man.dm.ni := man.dm * !app.mthd %in% c('os', 'cs')]

> idat1[, man.ph.ni := man.ph * !app.mthd %in% c('os', 'cs')]

> idat1[, app.mthd.inj := app.mthd %in% c('os', 'cs')]

> dfsumm(idat1[, .(app.mthd, app.rate.ni, man.dm, man.source, man.ph, tan.app)])

 18562 rows and 6 columns
 550 unique rows
                    app.mthd app.rate.ni  man.dm man.source  man.ph tan.app
Class              character     numeric numeric  character numeric numeric
Minimum                   bc           0   0.772        cat     4.3    10.9
Maximum                   ts         133    13.8        pig     8.9     206
Mean                    <NA>        50.5    5.62       <NA>    7.52    69.2
Unique (excld. NA)         5         304     270          4      93     530
Missing values             0           0       0          0       0       0
Sorted                 FALSE       FALSE   FALSE      FALSE   FALSE   FALSE
                                                                           

> dfsumm(idat1[, .(ct, cta, air.temp, wind.2m, rain.rate, rain.cum)])

 18562 rows and 6 columns
 14388 unique rows
                        ct     cta air.temp wind.2m rain.rate rain.cum
Class              numeric numeric  numeric numeric   numeric  numeric
Minimum               0.15     -65    -4.83       0         0        0
Maximum                650    1420     35.4    28.4       8.4      113
Mean                   114     116     12.5    2.47    0.0408     4.22
Unique (excld. NA)    3110    5828     3033    8134       555      266
Missing values           0     554        2      13        87       87
Sorted               FALSE   FALSE    FALSE   FALSE     FALSE    FALSE
                                                                      

> # Interpolate missing wind and air temperature values
> idat1[, `:=` (interp.wind = is.na(wind.2m), interp.air.temp = is.na(air.temp)), ]

> idat1 <- interpm(idat1, 'ct', c('wind.2m', 'air.temp'), by = 'pmid', rule = 2)

> # Get an average air temperature for input
> idat1[, air.temp.ave := ifelse(!is.na(air.temp.48), air.temp.48, air.temp.24)]

> # Set missing rain to 0
> idat1[is.na(rain.rate), rain.missing := TRUE]

> idat1[is.na(rain.rate), rain.rate := 0]

> idat1[is.na(rain.cum), rain.cum := 0]

> # Set cta to ct where missing
> idat1[is.na(cta), cta := ct]

> # And drop obs with cta < 0
> idat1 <- idat1[cta > 0, ]

> dfsumm(idat1[, .(app.mthd, app.rate.ni, man.dm, man.source, man.ph, tan.app)])

 18064 rows and 6 columns
 550 unique rows
                    app.mthd app.rate.ni  man.dm man.source  man.ph tan.app
Class              character     numeric numeric  character numeric numeric
Minimum                   bc           0   0.772        cat     4.3    10.9
Maximum                   ts         133    13.8        pig     8.9     206
Mean                    <NA>        50.6    5.63       <NA>    7.52      69
Unique (excld. NA)         5         304     270          4      93     530
Missing values             0           0       0          0       0       0
Sorted                 FALSE       FALSE   FALSE      FALSE   FALSE   FALSE
                                                                           

> dfsumm(idat1[, .(ct, cta, air.temp, wind.2m, rain.rate, rain.cum)])

 18064 rows and 6 columns
 13965 unique rows
                        ct     cta air.temp wind.2m rain.rate rain.cum
Class              numeric numeric  numeric numeric   numeric  numeric
Minimum               0.15  0.0167    -4.83       0         0        0
Maximum                650    1420     35.4    28.4       8.4      113
Mean                   117     118     12.5    2.51    0.0407      4.3
Unique (excld. NA)    3110    5638     2976    7794       554      266
Missing values           0       0        0       0         0        0
Sorted               FALSE   FALSE    FALSE   FALSE     FALSE    FALSE
                                                                      

> # Will run model with flatout option, so need to do dummy variable data prep separately here
> # Note: *must* use flatout option for safety once rows have been added (will screw up incorp otherwise) etc.
> idat1 <- idat1[order(pmid, cta), ]

> idat1 <- alfam2(idat1, pars = ALFAM2::alfam2pars02, app.name = 'tan.app', 
+                 time.name = 'cta', group = 'pmid',
+                 time.incorp = 'time.incorp',  incorp.names = c('incorp', 'deep', 'shallow'), 
+                 warn = TRUE, value = 'incorp')

> idat1 <- data.table(idat1)

> # Set emission in added incorporation rows (needed because flatout option will be used) to NA so they are not used in fitting
> # See love-hate-data.table repo issue #1 for more on this operation below
> idat1[(`__add.row`), c('j.NH3', 'e.cum', 'e.rel')] <- NA

> # Alternate predictor variables
> idat1[, wind.sqrt := sqrt(wind.2m)]

> idat1[, air.temp.log := log10(air.temp + 273.15)]

> idat1[, man.dm.log := log10(man.dm)]

> # resCalc needs measured vars w names that match alfam2() output
> idat1[, `:=` (j = j.NH3, e = e.cum, er = e.rel)]

> # *dat2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> idat2[, app.rate.ni := app.rate * !app.mthd %in% c('os', 'cs')]

> idat2[, man.dm.ni := man.dm * !app.mthd %in% c('os', 'cs')]

> idat2[, man.ph.ni := man.ph * !app.mthd %in% c('os', 'cs')]

> idat2[, app.mthd.inj := app.mthd %in% c('os', 'cs')]

> dfsumm(idat2[, .(app.mthd, app.rate.ni, man.dm, man.source, man.ph, tan.app)])

 12607 rows and 6 columns
 498 unique rows
                    app.mthd app.rate.ni  man.dm man.source  man.ph tan.app
Class              character     numeric numeric  character numeric numeric
Minimum                   bc           0   0.772        cat    6.54    10.9
Maximum                   ts         133    13.8        pig     8.9     196
Mean                    <NA>        43.4    5.62       <NA>    7.55    64.4
Unique (excld. NA)         5         271     257          4      81     484
Missing values             0           0       0          0       0       0
Sorted                 FALSE       FALSE   FALSE      FALSE   FALSE   FALSE
                                                                           

> dfsumm(idat2[, .(ct, cta, air.temp, wind.2m, rain.rate, rain.cum)])

 12607 rows and 6 columns
 11302 unique rows
                        ct     cta air.temp wind.2m rain.rate rain.cum
Class              numeric numeric  numeric numeric   numeric  numeric
Minimum               0.15   -45.8    -4.83       0         0        0
Maximum                650    1420     35.4    28.4       8.4      113
Mean                   103     105     11.6    2.69    0.0304     3.55
Unique (excld. NA)    2991    5480     2656    6857       528      220
Missing values           0     554        2      13        87       87
Sorted               FALSE   FALSE    FALSE   FALSE     FALSE    FALSE
                                                                      

> # Interpolate missing wind and air temperature values
> idat2[, `:=` (interp.wind = is.na(wind.2m), interp.air.temp = is.na(air.temp)), ]

> idat2 <- interpm(idat2, 'ct', c('wind.2m', 'air.temp'), by = 'pmid', rule = 2)

> # Get an average air temperature for input
> idat2[, air.temp.ave := ifelse(!is.na(air.temp.48), air.temp.48, air.temp.24)]

> # Set missing rain to 0
> idat2[is.na(rain.rate), rain.missing := TRUE]

> idat2[is.na(rain.rate), rain.rate := 0]

> idat2[is.na(rain.cum), rain.cum := 0]

> # Set cta to ct where missing
> idat2[is.na(cta), cta := ct]

> # And drop obs with cta < 0
> idat2 <- idat2[cta > 0, ]

> dfsumm(idat2[, .(app.mthd, app.rate.ni, man.dm, man.source, man.ph, tan.app)])

 12358 rows and 6 columns
 498 unique rows
                    app.mthd app.rate.ni  man.dm man.source  man.ph tan.app
Class              character     numeric numeric  character numeric numeric
Minimum                   bc           0   0.772        cat    6.54    10.9
Maximum                   ts         133    13.8        pig     8.9     196
Mean                    <NA>        43.6    5.62       <NA>    7.54    64.3
Unique (excld. NA)         5         271     257          4      81     484
Missing values             0           0       0          0       0       0
Sorted                 FALSE       FALSE   FALSE      FALSE   FALSE   FALSE
                                                                           

> dfsumm(idat2[, .(ct, cta, air.temp, wind.2m, rain.rate, rain.cum)])

 12358 rows and 6 columns
 11053 unique rows
                        ct     cta air.temp wind.2m rain.rate rain.cum
Class              numeric numeric  numeric numeric   numeric  numeric
Minimum               0.15  0.0167    -4.83       0         0        0
Maximum                650    1420     35.4    28.4       8.4      113
Mean                   105     105     11.6    2.72    0.0293     3.57
Unique (excld. NA)    2991    5371     2609    6631       527      220
Missing values           0       0        0       0         0        0
Sorted               FALSE   FALSE    FALSE   FALSE     FALSE    FALSE
                                                                      

> # Will run model with flatout option, so need to do dummy variable data prep separately here
> # Note: *must* use flatout option for safety once rows have been added (will screw up incorp otherwise) etc.
> # No incorporation so skipping prepIncorp() call
> idat2 <- idat2[order(pmid, cta), ]

> idat2 <- alfam2(idat2, pars = ALFAM2::alfam2pars02, app.name = 'tan.app', 
+                 time.name = 'cta', group = 'pmid',
+                 time.incorp = 'time.incorp',  incorp.names = c('incorp', 'deep', 'shallow'), 
+                 warn = TRUE, value = 'incorp')

> idat2 <- data.table(idat2)

> # Set emission in added incorporation rows (needed because flatout option will be used) to NA so they are not used in fitting
> # See love-hate-data.table repo issue #1 for more on this operation below
> idat2[(`__add.row`), c('j.NH3', 'e.cum', 'e.rel')] <- NA

> # Alternate predictor variables
> idat2[, wind.sqrt := sqrt(wind.2m)]

> idat2[, air.temp.log := log10(air.temp + 273.15)]

> idat2[, man.dm.log := log10(man.dm)]

> # resCalc needs measured vars w names that match alfam2() output
> idat2[, `:=` (j = j.NH3, e = e.cum, er = e.rel)]

> # Repeat for *dati, and also fill in more missing values ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> idati[, app.rate.ni := app.rate * !app.mthd %in% c('os', 'cs')]

> idati[, man.dm.ni := man.dm * !app.mthd %in% c('os', 'cs')]

> idati[, man.ph.ni := man.ph * !app.mthd %in% c('os', 'cs')]

> idati[, app.mthd.inj := app.mthd %in% c('os', 'cs')]

> dfsumm(idati[, .(app.mthd, app.rate.ni, man.dm, man.source, man.ph, tan.app)])

 8934 rows and 6 columns
 99 unique rows
                    app.mthd app.rate.ni  man.dm man.source  man.ph tan.app
Class              character     numeric numeric  character numeric numeric
Minimum                   bc           0    1.81        cat    7.12    39.2
Maximum                   ts         133    13.8        pig     8.5     235
Mean                    <NA>          71    5.72       <NA>    7.51    84.2
Unique (excld. NA)         5          75      48          3      23      97
Missing values             0           0       0          0     680       0
Sorted                 FALSE       FALSE   FALSE      FALSE   FALSE   FALSE
                                                                           

> dfsumm(idati[, .(ct, cta, air.temp, wind.2m, rain.rate, rain.cum)])

 8934 rows and 6 columns
 6095 unique rows
                        ct     cta air.temp wind.2m rain.rate rain.cum
Class              numeric numeric  numeric numeric   numeric  numeric
Minimum               0.25   -17.6     -1.9       0         0        0
Maximum                508     508     35.2      10       4.2       55
Mean                   139     147       14    2.32    0.0483     5.92
Unique (excld. NA)    1803    2458     1556    3032        45      162
Missing values           0      11        0       0         0        0
Sorted               FALSE   FALSE    FALSE   FALSE     FALSE    FALSE
                                                                      

> # Interpolate missing wind and air temperature values
> idati[, `:=` (interp.wind = is.na(wind.2m), interp.air.temp = is.na(air.temp)), ]

> idati <- interpm(idati, 'ct', c('wind.2m', 'air.temp'), by = 'pmid', rule = 2)

> # Get an average air temperature for input
> idati[, air.temp.ave := ifelse(!is.na(air.temp.48), air.temp.48, air.temp.24)]

> # Fill in missing pH with institute means from full database
> mnph <- idat[, .(man.ph.mean = mean(na.omit(man.ph)), man.ph.n = sum(is.na(man.ph))), by = inst]

> idati <- merge(idati, mnph, by = 'inst')

> idati[is.na(man.ph), man.ph.missing := TRUE]

> idati[is.na(man.ph), man.ph := man.ph.mean]

> range(idati[, man.ph.mean])
[1] 7.328415 8.360000

> # Set missing rain to 0
> idati[is.na(rain.rate), rain.missing := TRUE]

> idati[is.na(rain.rate), rain.rate := 0]

> idati[is.na(rain.cum), rain.cum := 0]

> # Set cta to ct where missing
> idati[is.na(cta), cta := ct]

> # And drop obs with cta < 0
> idati <- idati[cta > 0, ]

> dfsumm(idati[, .(app.mthd, app.rate.ni, man.dm, man.source, man.ph, tan.app)])

 8715 rows and 6 columns
 99 unique rows
                    app.mthd app.rate.ni  man.dm man.source  man.ph tan.app
Class              character     numeric numeric  character numeric numeric
Minimum                   bc           0    1.81        cat    7.12    39.2
Maximum                   ts         133    13.8        pig     8.5     235
Mean                    <NA>        71.2    5.73       <NA>    7.49      84
Unique (excld. NA)         5          75      48          3      25      97
Missing values             0           0       0          0       0       0
Sorted                 FALSE       FALSE   FALSE      FALSE   FALSE   FALSE
                                                                           

> dfsumm(idati[, .(ct, cta, air.temp, wind.2m, rain.rate, rain.cum)])

 8715 rows and 6 columns
 5951 unique rows
                        ct     cta air.temp wind.2m rain.rate rain.cum
Class              numeric numeric  numeric numeric   numeric  numeric
Minimum               0.25    0.25     -1.9       0         0        0
Maximum                508     508     35.2      10       4.2       55
Mean                   143     151     13.9    2.36    0.0495     6.07
Unique (excld. NA)    1803    2370     1549    2891        45      162
Missing values           0       0        0       0         0        0
Sorted               FALSE   FALSE    FALSE   FALSE     FALSE    FALSE
                                                                      

> # Will run model with flatout option, so need to do dummy variable data prep separately here
> # Note: *must* use flatout option for safety once rows have been added (will screw up incorp otherwise) etc.
> idati <- idati[order(pmid, cta), ]

> idati <- alfam2(idati, pars = ALFAM2::alfam2pars02, app.name = 'tan.app', 
+                 time.name = 'cta', group = 'pmid',
+                 time.incorp = 'time.incorp',  incorp.names = c('incorp', 'deep', 'shallow'), 
+                 warn = TRUE, value = 'incorp')

> idati <- data.table(idati)

> # Set emission in added incorporation rows (needed because flatout option will be used) to NA so they are not used in fitting
> # See love-hate-data.table repo issue #1 for more on this operation below
> idati[(`__add.row`), c('j.NH3', 'e.cum', 'e.rel')] <- NA

> # Alternate predictor variables
> idati[, wind.sqrt := sqrt(wind.2m)]

> idati[, air.temp.log := log10(air.temp + 273.15)]

> idati[, man.dm.log := log10(man.dm)]

> # resCalc needs measured vars w names that match alfam2() output
> idati[, `:=` (j = j.NH3, e = e.cum, er = e.rel)]

> # Add idati (other incorporation obs) to idat1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> # Not using merge() but I always search for that function so there it is now to use as a keyword
> # Add missing columns, with row indices for safety
> idati[app. .... [TRUNCATED] 

> idati[app.mthd != 'os', app.mthd.os := 0]

> idati[app.mthd != 'cs', app.mthd.cs := 0]

> idati[, dataset := 0]

> names(idat1)
  [1] "pid"                   "pmid"                  "inst"                 
  [4] "eid"                   "sub.period"            "corr.period"          
  [7] "proj"                  "exper"                 "exper2"               
 [10] "institute"             "country"               "submitter"            
 [13] "file"                  "first.row.in.file.int" "last.row.in.file.int" 
 [16] "row.in.file.plot"      "pub.id"                "pub.info"             
 [19] "lat"                   "long"                  "topo"                 
 [22] "field"                 "plot"                  "plot.area"            
 [25] "treat"                 "rep"                   "rep2"                 
 [28] "n.ints"                "t.start.p"             "t.end.p"              
 [31] "dt1"                   "dt.min"                "dt.max"               
 [34] "ct.min"                "ct.max"                "meas.tech"            
 [37] "meas.tech2"            "meas.tech.orig"        "meas.tech.det"        
 [40] "j.NH31"                "j.rel1"                "e.1"                  
 [43] "e.4"                   "e.6"                   "e.12"                 
 [46] "e.24"                  "e.48"                  "e.72"                 
 [49] "e.96"                  "e.168"                 "e.final"              
 [52] "e.cum.1"               "e.cum.4"               "e.cum.6"              
 [55] "e.cum.12"              "e.cum.24"              "e.cum.48"             
 [58] "e.cum.72"              "e.cum.96"              "e.cum.168"            
 [61] "e.cum.final"           "e.rel.1"               "e.rel.4"              
 [64] "e.rel.6"               "e.rel.12"              "e.rel.24"             
 [67] "e.rel.48"              "e.rel.72"              "e.rel.96"             
 [70] "e.rel.168"             "e.rel.final"           "clay"                 
 [73] "silt"                  "sand"                  "oc"                   
 [76] "soil.type"             "soil.type2"            "soil.water"           
 [79] "soil.water.v"          "soil.moist"            "soil.ph"              
 [82] "soil.dens"             "crop.res"              "till"                 
 [85] "air.temp.1"            "air.temp.4"            "air.temp.6"           
 [88] "air.temp.12"           "air.temp.24"           "air.temp.48"          
 [91] "air.temp.72"           "air.temp.96"           "air.temp.168"         
 [94] "air.temp.mn"           "air.temp.z"            "soil.temp.1"          
 [97] "soil.temp.4"           "soil.temp.6"           "soil.temp.12"         
[100] "soil.temp.24"          "soil.temp.48"          "soil.temp.72"         
[103] "soil.temp.96"          "soil.temp.168"         "soil.temp.mn"         
[106] "soil.temp.surf.1"      "soil.temp.surf.4"      "soil.temp.surf.6"     
[109] "soil.temp.surf.12"     "soil.temp.surf.24"     "soil.temp.surf.48"    
[112] "soil.temp.surf.72"     "soil.temp.surf.96"     "soil.temp.surf.168"   
[115] "soil.temp.surf.mn"     "soil.temp.z"           "rad.1"                
[118] "rad.4"                 "rad.6"                 "rad.12"               
[121] "rad.24"                "rad.48"                "rad.72"               
[124] "rad.96"                "rad.168"               "rad.mn"               
[127] "wind.1"                "wind.4"                "wind.6"               
[130] "wind.12"               "wind.24"               "wind.48"              
[133] "wind.72"               "wind.96"               "wind.168"             
[136] "wind.mn"               "wind.z"                "wind.2m.1"            
[139] "wind.2m.4"             "wind.2m.6"             "wind.2m.12"           
[142] "wind.2m.24"            "wind.2m.48"            "wind.2m.72"           
[145] "wind.2m.96"            "wind.2m.168"           "wind.2m.mn"           
[148] "wind.loc"              "rain.1"                "rain.4"               
[151] "rain.6"                "rain.12"               "rain.24"              
[154] "rain.48"               "rain.72"               "rain.96"              
[157] "rain.168"              "rain.tot"              "rain.rate.1"          
[160] "rain.rate.4"           "rain.rate.6"           "rain.rate.12"         
[163] "rain.rate.24"          "rain.rate.48"          "rain.rate.72"         
[166] "rain.rate.96"          "rain.rate.168"         "rain.rate.mn"         
[169] "rh.1"                  "rh.4"                  "rh.6"                 
[172] "rh.12"                 "rh.24"                 "rh.48"                
[175] "rh.72"                 "rh.96"                 "rh.168"               
[178] "rh.mn"                 "far.loc"               "man.source"           
[181] "man.source.orig"       "man.source.det"        "man.bed"              
[184] "man.con"               "man.trt1"              "man.trt2"             
[187] "man.trt3"              "man.stor"              "man.dm"               
[190] "man.vs"                "man.tkn"               "man.tan"              
[193] "man.vfa"               "man.tic"               "man.ua"               
[196] "man.ph"                "acid"                  "date.start"           
[199] "app.start"             "app.start.orig"        "app.end"              
[202] "app.end.orig"          "app.method"            "app.method.orig"      
[205] "app.rate"              "tan.app"               "incorp"               
[208] "incorp.orig"           "time.incorp"           "man.area"             
[211] "dist.inj"              "furrow.z"              "furrow.w"             
[214] "crop"                  "crop.orig"             "crop.z"               
[217] "crop.area"             "lai"                   "notes.plot"           
[220] "flag.plot"             "app.mthd"              "digested"             
[223] "man.ph.missing"        "iexper"                "oid"                  
[226] "row.in.file.int"       "interval"              "t.start"              
[229] "t.end"                 "t.start.orig"          "t.end.orig"           
[232] "dt"                    "dt.calc"               "dt.diff"              
[235] "ct"                    "mt"                    "cta"                  
[238] "bta"                   "bg.dl"                 "bg.val"               
[241] "bg.unit"               "MOL"                   "ustar"                
[244] "rl"                    "air.pres"              "air.pres.unit"        
[247] "j.NH3"                 "j.rel"                 "e.int"                
[250] "e.cum"                 "e.rel"                 "air.temp"             
[253] "soil.temp"             "soil.temp.surf"        "pH.surf"              
[256] "rad"                   "wind"                  "wind.2m"              
[259] "soil.temp.z.int"       "air.temp.z.int"        "wind.z.int"           
[262] "wind.loc.int"          "far.loc.int"           "rain"                 
[265] "rain.rate"             "rain.cum"              "rh"                   
[268] "notes.int"             "flag.int"              "rain.missing"         
[271] "dataset"               "app.rate.ni"           "man.dm.ni"            
[274] "man.ph.ni"             "app.mthd.inj"          "interp.wind"          
[277] "interp.air.temp"       "air.temp.ave"          "app.mthd.ts"          
[280] "app.mthd.bc"           "app.mthd.os"           "app.mthd.cs"          
[283] "incorp.shallow"        "incorp.deep"           "man.source.pig"       
[286] "__group"               "__orig.order"          "__add.row"            
[289] "__f4"                  "wind.sqrt"             "air.temp.log"         
[292] "man.dm.log"            "j"                     "e"                    
[295] "er"                   

> idat1 <- rbind(idat1, idati, fill = TRUE)[, dataset := 1]

> # Needs next row beacuse there is lack of duplication for same pmid because missing pH is added in idati but not idat1
> idat1 <- idat1[!duplicated(idat1[, .(pmid, cta)]), ]

> # And then get new plots from idati in the pdat* df as well
> pdat1 <- pdat[pmid %in% unique(idat1[, pmid])]

> # Now remove values outside emission limits
> # Done here and not in subset.R in order to see effect on counts
> dim(pdat1)
[1] 724 224

> pdat1 <- pdat1[e.rel.24 > -0.20 & 
+                e.rel.24 < 1.20 &
+                e.rel.final < 1.20 &
+                e.rel.final > -0.20, ]

> dim(pdat1)
[1] 722 224

> range(pdat1$e.rel.final)
[1] -0.11627  1.00380

> range(pdat1$e.rel.24)
[1] -0.0022194  0.9199000

> idat1 <- idat1[pmid %in% unique(pdat1[, pmid])]

> table(pdat1$app.mthd)

  bc bsth   cs   os   ts 
 222  205   13  119  163 

> # (Re)calculate weights ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> # Equal by application method
> idat1[, weight.app.mthd := 1 / length(unique(pmid)), by = app.mthd]

> # Get weights, equal by plot
> idat1[, weight.plots := 1 / sum(cta <= 168), by = pmid]

> # Normalize for cumulative emission
> idat1[, weight.er := 1 / max(na.omit(er[cta <= 168])), by = pmid]

> # Normalize for number of intervals (later ints count more, last counts the most)
> idat1[, weight.int := interval / max(interval[cta <= 168]), by = pmid]

> # Keep to 168 h
> idat1[, weight.168 := as.numeric(cta <= 168)]

> # Combined
> idat1[, weight.1 :=                                weight.plots * weight.int * weight.168 * (cta > 0) * !is.na(er)]

> idat1[, weight.1a :=                               weight.plots *              weight.168 * (cta > 0) * !is.na(er)]

> idat1[, weight.1b := weight.app.mthd * weight.er * weight.plots * weight.int * weight.168 * (cta > 0) * !is.na(er)]

> idat1[, weight.j := weight.plots * weight.168 * (cta > 0) * !is.na(j), by = pmid]

> # Only last obs
> idat1[, cta.168 := cta[which.min(abs(cta - 168))], by = pmid]

> idat1[, weight.last := 1 * (cta == cta.168), by = pmid]

> idat1[, weight.2 := weight.last * weight.app.mthd * weight.er, by = pmid]

> # Arbitrary reduction in broadcast weight, increase in others, partially offsetting plot numbers, also low emission
> ww <- c(bsth = 1, ts = 1, os = 2, cs = 2, bc = 0.5)

> idat1[, `:=` (weight.lastc = weight.last * ww[app.mthd], weight.1c = weight.1a * ww[app.mthd])]

> # Equal by application method
> idat2[, weight.app.mthd := 1 / length(unique(pmid)), by = app.mthd]

> # Get weights, equal by plot
> idat2[, weight.plots := 1 / length(j.NH3), by = pmid]

> # Normalize for cumulative emission
> idat2[, weight.er := 1 / max(er[cta <= 168]), by = pmid]

> # Normalize for number of intervals (later ints count more, last counts the most)
> idat2[, weight.int := interval / max(interval[cta <= 168]), by = pmid]

> # Keep to 168 h
> idat2[, weight.168 := as.numeric(cta <= 168), by = pmid]

> # Combined
> idat2[, weight.1 :=                                weight.plots * weight.int * weight.168 * (cta > 0) * !is.na(er)]

> idat2[, weight.1a :=                               weight.plots *              weight.168 * (cta > 0) * !is.na(er)]

> idat2[, weight.1b := weight.app.mthd * weight.er * weight.plots * weight.int * weight.168 * (cta > 0) * !is.na(er)]

> idat2[, weight.j := weight.plots * weight.168 * (cta > 0) * !is.na(j), by = pmid]

> # Only last obs
> idat2[, cta.168 := cta[which.min(abs(cta - 168))], by = pmid]

> idat2[, weight.last := 1 * (cta == cta.168), by = pmid]

> idat2[, weight.2 := weight.last * weight.app.mthd * weight.er, by = pmid]

> # Arbitrary reduction in broadcast weight, increase in others, partially offsetting plot numbers, also low emission
> ww <- c(bsth = 1, ts = 1, os = 2, cs = 2, bc = 0.5)

> idat2[, `:=` (weight.lastc = weight.last * ww[app.mthd], weight.1c = weight.1a * ww[app.mthd])]

> # Missing incorporation problem
> idat1[is.na(incorp.deep), incorp.deep := 0]

> idat1[is.na(incorp.shallow), incorp.shallow := 0]
